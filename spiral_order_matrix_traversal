Given a matrix of m * n elements (m rows, n columns), return all elements of the matrix in spiral order.

Example:

Given the following matrix:

[
    [ 1, 2, 3 ],
    [ 4, 5, 6 ],
    [ 7, 8, 9 ]
]
You should return

[1, 2, 3, 6, 9, 8, 7, 4, 5]

#code

class Solution:
	# @param A : tuple of list of integers
	# @return a list of integers
	def spiralOrder(self, A):
	    t = 0
	    b = len(A)-1
	    l = 0
	    r = len(A[0])-1
	    temp = []
	    path = 0
	    while(t <= b and l <= r):
	        
	        if path == 0:
	            for i in range(l,r+1):
	                temp.append(A[t][i])
	            t = t + 1
	            path = path + 1
	            
	        elif path == 1:
	            for i in range(t,b+1):
	                temp.append(A[i][r])
	            r = r - 1
	            path = path + 1
	            
	        elif path == 2:
	            for i in range (r,l-1,-1):
	                temp.append(A[b][i])
	            b = b - 1
	            path = path + 1
	            
	        elif path == 3:
	            for i in range(b,t-1,-1):
	                temp.append(A[i][l])
	            l = l + 1
	            path = path + 1
	            
	        path = path % 4
	    return(temp)

A = [[1,2,3],[4,5,6],[7,8,9]]
ob = Solution()
print(ob.spiralOrder(A))
